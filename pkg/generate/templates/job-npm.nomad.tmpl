job "[[ template "job_name" . ]]" {
  datacenters = [[ .my.datacenters | toJson ]]
  region      = "[[ .my.region ]]"
  type        = "service"
  
  group "mcp-server" {
    count = [[ .my.count ]]

    network {
      port "mcp" {
        static = 3000
      }
    }

    service {
      name = "[[ template "job_name" . ]]-mcp"
      port = "mcp"
      
      check {
        type     = "http"
        path     = "/health"
        interval = "10s"
        timeout  = "2s"
      }
    }

    task "{{.TaskName}}" {
      driver = "exec"

      config {
        command = "node"
        args = [
          {{- if .RuntimeArgs}}
          {{- range .RuntimeArgs}}
          {{- if eq .Type "positional"}}
          "[[ .my.{{.Name | lower}} ]]",
          {{- else}}
          "--{{.Name}}",
          "[[ .my.{{.Name | lower}} ]]",
          {{- end}}
          {{- end}}
          {{- end}}
          {{- if .PackageArgs}}
          {{- range .PackageArgs}}
          {{- if eq .Type "positional"}}
          "[[ .my.{{.Name | lower}} ]]",
          {{- else}}
          "--{{.Name}}",
          "[[ .my.{{.Name | lower}} ]]",
          {{- end}}
          {{- end}}
          {{- end}}
        ]
      }

      artifact {
        source      = "npm://{{.PackageID}}@{{.PackageVersion}}"
        destination = "local/package"
        mode        = "dir"
      }

      {{- if .Environment}}
      env {
        NODE_PATH = "${NOMAD_TASK_DIR}/local/package/node_modules"
        {{- range .Environment}}
        {{.Name}} = "[[ .my.{{.Name | lower}} ]]"
        {{- end}}
      }
      {{- else}}
      env {
        NODE_PATH = "${NOMAD_TASK_DIR}/local/package/node_modules"
      }
      {{- end}}

      template {
        data = <<EOF
#!/bin/bash
cd ${NOMAD_TASK_DIR}/local/package
npm install --production
exec node .
EOF
        destination = "local/run.sh"
        perms       = "755"
      }

      resources {
        cpu    = [[ .my.cpu ]]
        memory = [[ .my.memory ]]
      }

      {{- if .HasTransport}}
      {{- if eq .Transport.Type "stdio"}}
      # MCP Server configured for stdio transport
      {{- else if eq .Transport.Type "sse"}}
      # MCP Server configured for SSE transport
      {{- end}}
      {{- end}}
    }
  }
}