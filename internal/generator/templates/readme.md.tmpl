# {{.ServerName}} MCP Server Pack

{{.Description}}

This Nomad Pack deploys the {{.ServerName}} MCP (Model Context Protocol) Server using {{.PackageType}} package type.

## Package Information

- **Package ID**: {{.PackageID}}
- **Version**: {{.Version}}
- **Package Type**: {{.PackageType}}
{{- if .HasRepository}}
- **Repository**: [{{.RepositoryURL}}]({{.RepositoryURL}})
{{- end}}

## Variables

| Name | Description | Type | Default |
|------|-------------|------|---------|
| datacenters | A list of datacenters in the region which are eligible for task placement | list(string) | ["dc1"] |
| region | The region where the job should be placed | string | "global" |
| count | The number of MCP server instances to run | number | 1 |
| cpu | The number of CPU units to reserve for the MCP server task | number | 100 |
| memory | The amount of memory in MB to reserve for the MCP server task | number | 256 |

## Usage

Deploy this pack using Nomad Pack:

```bash
nomad-pack run {{.ServerName | lower}}-{{.PackageType}}
```

### Custom Variables

You can override the default variables by providing a variables file:

```bash
nomad-pack run {{.ServerName | lower}}-{{.PackageType}} --var-file=my-vars.hcl
```

Example variables file (`my-vars.hcl`):

```hcl
datacenters = ["dc1", "dc2"]
count       = 2
cpu         = 200
memory      = 512
```
{{if .IsHTTPTransport}}
## Service Registration

This pack automatically registers the MCP server with Consul for HTTP-based servers. The service is registered with the name `{{.InferredServiceName}}` by default, but can be customized using the `service_name` variable.

### Container Port

The container listens on port {{.ContainerPort}} by default. This can be customized using the `container_port` variable:

```bash
nomad-pack run {{.ServerName | lower}}-{{.PackageType}} --var="container_port=8080"
```

### Port Allocation

The pack supports both dynamic and static port allocation:

**Dynamic Port Allocation (Default)**

By default, Nomad allocates a random available port on the host. This is ideal for most deployments:

```bash
nomad-pack run {{.ServerName | lower}}-{{.PackageType}}
```

With dynamic ports, load balancers need Consul service discovery to resolve the actual port.

**Static Port Allocation**

For simpler load balancer integration without service discovery, you can specify a static host port using the `host_port` variable:

```bash
nomad-pack run {{.ServerName | lower}}-{{.PackageType}} \
  --var="container_port={{.ContainerPort}}" \
  --var="host_port=8091"
```

With static ports, the MCP server will always bind to the specified host port (8091 in this example), making it easier to configure load balancers that don't support Consul service discovery.

### Customizing Service Registration

You can customize the service name:

```bash
nomad-pack run {{.ServerName | lower}}-{{.PackageType}} --var="service_name=my-custom-name"
```

### Adding Load Balancer Tags

For external access via load balancers like Traefik or Fabio, add custom tags using the `service_tags` variable.

#### Traefik Example

To expose the MCP server through Traefik:

```bash
nomad-pack run {{.ServerName | lower}}-{{.PackageType}} \
  --var='service_tags=["traefik.enable=true","traefik.http.middlewares.{{.InferredServiceName}}-strip.stripprefix.prefixes=/{{.InferredServiceName}}","traefik.http.routers.{{.InferredServiceName}}.entrypoints=http","traefik.http.routers.{{.InferredServiceName}}.rule=Host(`example.com`) && PathPrefix(`/{{.InferredServiceName}}`)","traefik.http.routers.{{.InferredServiceName}}.middlewares={{.InferredServiceName}}-strip"]'
```

This configuration:
- Enables Traefik routing
- Strips the `/{{.InferredServiceName}}` prefix before forwarding requests
- Routes traffic from `example.com/{{.InferredServiceName}}` to the MCP server
- Uses the HTTP entrypoint (add HTTPS configuration as needed)

#### Fabio Example

To expose through Fabio:

```bash
nomad-pack run {{.ServerName | lower}}-{{.PackageType}} \
  --var='service_tags=["urlprefix-/{{.InferredServiceName}}"]'
```

This routes traffic from `/{{.InferredServiceName}}` to the MCP server.

#### Consul Connect Example

To enable Consul Connect for service mesh:

```bash
nomad-pack run {{.ServerName | lower}}-{{.PackageType}} \
  --var='service_tags=["connect-enabled"]'
```

Note: Full Connect integration may require additional pack customization for sidecar proxies.

### Health Checks

The pack includes TCP health checks by default. You can customize the health check interval and timeout:

```bash
nomad-pack run {{.ServerName | lower}}-{{.PackageType}} \
  --var="health_check_interval=60s" \
  --var="health_check_timeout=10s"
```
{{end}}
## Generated by nomad-mcp-pack

This pack was automatically generated from the MCP Registry server definition.