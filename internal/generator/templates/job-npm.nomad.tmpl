job [[ template "job_name" . ]] {
  [[ template "region" . ]]
  datacenters = [[ var "datacenters" . | toStringList ]]
  type        = "service"

  group "mcp-server" {
    count = [[ var "count" . ]]

    {{- if or (eq .Transport.Type "streamable-http") (eq .Transport.Type "sse")}}
    network {
      port "http" {}
    }

    service {
      name = [[ var "service_name" . | quote ]]
      port = "http"

      check {
        type     = "http"
        path     = "/health"
        interval = "10s"
        timeout  = "2s"
      }
    }
    {{- end}}

    task "mcp-server" {
      driver = "docker"

      config {
        image = "node:18-alpine"
        {{- if or (eq .Transport.Type "streamable-http") (eq .Transport.Type "sse")}}
        ports = ["http"]
        {{- end}}
        command = "sh"
        args = [
          "-c",
          "npm install -g [[ var "package_name" . ]]@[[ var "package_version" . ]] && [[ var "package_name" . ]]{{- if .RuntimeArgs}} {{range .RuntimeArgs}}{{if eq .Type "positional"}} [[ var "{{.Name | lower}}" . ]]{{else}} {{.Name}} [[ var "{{.Name | lower}}" . ]]{{end}}{{end}}{{end}}{{- if .PackageArgs}} {{range .PackageArgs}}{{if eq .Type "positional"}} [[ var "{{.Name | lower}}" . ]]{{else}} {{.Name}} [[ var "{{.Name | lower}}" . ]]{{end}}{{end}}{{end}}"
        ]
      }

      {{- if .Environment}}
      env {
        {{- range .Environment}}
        {{.Name}} = [[ var "{{.Name | lower}}" . | quote ]]
        {{- end}}
      }
      {{- end}}

      resources {
        cpu    = [[ var "cpu" . ]]
        memory = [[ var "memory" . ]]
      }
    }
  }
}