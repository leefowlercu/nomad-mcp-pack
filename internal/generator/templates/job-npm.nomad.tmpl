job [[ template "job_name" . ]] {
  [[ template "region" . ]]
  datacenters = [[ var "datacenters" . | toStringList ]]
  type        = "service"

  group "mcp-server" {
    count = [[ var "count" . ]]

    {{- if or (eq .Transport.Type "streamable-http") (eq .Transport.Type "sse")}}
    network {
      port "http" {}
    }

    {{- end}}

    task "mcp-server" {
      driver = "docker"

      config {
        image = "node:18-alpine"
        {{- if or (eq .Transport.Type "streamable-http") (eq .Transport.Type "sse")}}
        ports = ["http"]
        {{- end}}
        command = "sh"
        args = [
          "-c",
          "{{- if .NPMExecution -}}
            {{- if eq .NPMExecution.Pattern `node-direct` -}}
            npm install [[ var `package_name` . ]]@[[ var `package_version` . ]] && node node_modules/[[ var `package_name` . ]]/{{.NPMExecution.ScriptPath}}
            {{- else if eq .NPMExecution.Pattern `global-bin` -}}
            npm install -g [[ var `package_name` . ]]@[[ var `package_version` . ]] && {{.NPMExecution.BinCommand}}
            {{- else -}}
            npx [[ var `package_name` . ]]@[[ var `package_version` . ]]
            {{- end}}
          {{- else -}}
            {{/* Fallback if NPMExecution is nil */}}
            npm install -g [[ var `package_name` . ]]@[[ var `package_version` . ]] && [[ var `package_name` . ]]
          {{- end}}
          {{- /* Add runtime and named arguments only */ -}}
          {{- range .RuntimeArgs}}{{if eq .Type `named`}} {{.Name}} [[ var `{{.Name | lower}}` . ]]{{end}}{{end}}
          {{- range .PackageArgs}}{{if eq .Type `named`}} {{.Name}} [[ var `{{.Name | lower}}` . ]]{{end}}{{end}}"
        ]
      }

      {{- if .Environment}}
      env {
        {{- range .Environment}}
        {{.Name}} = [[ var "{{.Name | lower}}" . | quote ]]
        {{- end}}
      }
      {{- end}}

      resources {
        cpu    = [[ var "cpu" . ]]
        memory = [[ var "memory" . ]]
      }
    }
  }
}