job [[ template "job_name" . ]] {
  [[ template "region" . ]]
  datacenters = [[ var "datacenters" . | toStringList ]]
  type        = "service"
  
  group "mcp-server" {
    count = [[ var "count" . ]]

    {{- if or (eq .Transport.Type "streamable-http") (eq .Transport.Type "sse")}}
    network {
      port "http" {}
    }

    {{- end}}

    task "{{.TaskName}}" {
      driver = "exec"

      config {
        command = "/bin/bash"
        args    = ["local/run.sh"]
      }

      {{- if .Environment}}
      env {
        DOTNET_ROOT = "${NOMAD_TASK_DIR}/local/dotnet"
        PATH = "${NOMAD_TASK_DIR}/local/dotnet:${PATH}"
        {{- range .Environment}}
        {{.Name}} = [[ var "{{.Name | lower}}" . | quote ]]
        {{- end}}
      }
      {{- else}}
      env {
        DOTNET_ROOT = "${NOMAD_TASK_DIR}/local/dotnet"
        PATH = "${NOMAD_TASK_DIR}/local/dotnet:${PATH}"
      }
      {{- end}}

      template {
        data = <<EOF
#!/bin/bash
set -e

# Install .NET tool
dotnet tool install {{.PackageID}} --version {{.PackageVersion}} --tool-path ${NOMAD_TASK_DIR}/local/tools

# Run the MCP server
exec ${NOMAD_TASK_DIR}/local/tools/{{.PackageID | base}} \
{{- if .RuntimeArgs}}
{{- range .RuntimeArgs}}
{{- if eq .Type "positional"}}
  [[ var "{{.Name | lower}}" . | quote ]] \
{{- else}}
  {{.Name}} [[ var "{{.Name | lower}}" . | quote ]] \
{{- end}}
{{- end}}
{{- end}}
{{- if .PackageArgs}}
{{- range .PackageArgs}}
{{- if eq .Type "positional"}}
  [[ var "{{.Name | lower}}" . | quote ]] \
{{- else}}
  {{.Name}} [[ var "{{.Name | lower}}" . | quote ]] \
{{- end}}
{{- end}}
{{- end}}
EOF
        destination = "local/run.sh"
        perms       = "755"
      }

      resources {
        cpu    = [[ var "cpu" . ]]
        memory = [[ var "memory" . ]]
      }

      {{- if .HasTransport}}
      {{- if eq .Transport.Type "stdio"}}
      # MCP Server configured for stdio transport
      {{- else if eq .Transport.Type "sse"}}
      # MCP Server configured for SSE transport
      {{- end}}
      {{- end}}
    }
  }
}